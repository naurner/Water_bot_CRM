from datetime import datetime, timedelta
import logging
from telegram.error import TelegramError

logger = logging.getLogger(__name__)


class ReminderScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Scheduled Messages API"""

    @staticmethod
    async def schedule_reminders(context, chat_id, order_id, delivery_date_str, delivery_time_str, address):
        """
        –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ Telegram Scheduled Messages

        :param context: Context –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å bot
        :param chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param order_id: ID –∑–∞–∫–∞–∑–∞
        :param delivery_date_str: –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        :param delivery_time_str: –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
        :param address: –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
        :return: Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            delivery_datetime = datetime.strptime(
                f"{delivery_date_str} {delivery_time_str}",
                '%Y-%m-%d %H:%M'
            )

            # –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 8:00 –¥–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏
            morning_reminder_time = datetime.strptime(
                f"{delivery_date_str} 08:00",
                '%Y-%m-%d %H:%M'
            )

            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏
            pre_delivery_reminder_time = delivery_datetime - timedelta(minutes=30)

            # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            now = datetime.now()

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ
            morning_scheduled = False
            morning_message_id = None
            if morning_reminder_time > now:
                morning_text = (
                    f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n"
                    f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ {delivery_time_str} "
                    f"–∫ –≤–∞–º –ø—Ä–∏–µ–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ –≤–æ–¥—ã.\n\n"
                    f"üìã –ó–∞–∫–∞–∑: {order_id}\n"
                    f"üìç –ê–¥—Ä–µ—Å: {address}"
                )

                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Unix timestamp
                    schedule_timestamp = int(morning_reminder_time.timestamp())

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
                    message = await context.bot.send_message(
                        chat_id=chat_id,
                        text=morning_text,
                        schedule_date=schedule_timestamp
                    )
                    morning_message_id = message.message_id
                    morning_scheduled = True

                    logger.info(f"–£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {morning_reminder_time} (message_id: {morning_message_id}) –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                except TelegramError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                except Exception as e:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 30 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ
            pre_delivery_scheduled = False
            pre_delivery_message_id = None
            if pre_delivery_reminder_time > now:
                pre_delivery_text = (
                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                    f"–ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç (–≤ {delivery_time_str}) "
                    f"–∫ –≤–∞–º –ø—Ä–∏–µ–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ –≤–æ–¥—ã.\n\n"
                    f"üìã –ó–∞–∫–∞–∑: {order_id}\n"
                    f"üìç –ê–¥—Ä–µ—Å: {address}\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É! üëç"
                )

                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Unix timestamp
                    schedule_timestamp = int(pre_delivery_reminder_time.timestamp())

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
                    message = await context.bot.send_message(
                        chat_id=chat_id,
                        text=pre_delivery_text,
                        schedule_date=schedule_timestamp
                    )
                    pre_delivery_message_id = message.message_id
                    pre_delivery_scheduled = True

                    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 30 –º–∏–Ω—É—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {pre_delivery_reminder_time} (message_id: {pre_delivery_message_id}) –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                except TelegramError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 30 –º–∏–Ω—É—Ç: {e}")
                except Exception as e:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 30 –º–∏–Ω—É—Ç: {e}")

            return {
                'morning': {
                    'scheduled': morning_scheduled,
                    'time': morning_reminder_time,
                    'message_id': morning_message_id
                },
                'pre_delivery': {
                    'scheduled': pre_delivery_scheduled,
                    'time': pre_delivery_reminder_time,
                    'message_id': pre_delivery_message_id
                }
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
            return None

    @staticmethod
    async def cancel_scheduled_messages(context, chat_id, message_ids):
        """
        –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

        :param context: Context –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å bot
        :param chat_id: ID —á–∞—Ç–∞
        :param message_ids: –°–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã
        :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        if not message_ids:
            return 0

        cancelled_count = 0

        try:
            for message_id in message_ids:
                if message_id:
                    try:
                        await context.bot.delete_message(
                            chat_id=chat_id,
                            message_id=message_id
                        )
                        cancelled_count += 1
                        logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_id}")
                    except TelegramError as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

            return cancelled_count

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return cancelled_count

    @staticmethod
    async def cancel_reminders_for_order(context, order_id):
        """
        –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ ID –∑–∞–∫–∞–∑–∞

        :param context: Context –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å bot
        :param order_id: ID –∑–∞–∫–∞–∑–∞
        :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        """
        from database import Database

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            order = Database.get_order_by_id(order_id)
            if not order:
                logger.warning(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return 0

            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
            morning_msg_id = order.get('morning_reminder_id')
            pre_delivery_msg_id = order.get('pre_delivery_reminder_id')

            # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –¥–ª—è –æ—Ç–º–µ–Ω—ã
            message_ids = []
            if morning_msg_id:
                message_ids.append(morning_msg_id)
            if pre_delivery_msg_id:
                message_ids.append(pre_delivery_msg_id)

            if not message_ids:
                logger.info(f"–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                return 0

            # –û—Ç–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_id = order.get('user_id')
            cancelled_count = await ReminderScheduler.cancel_scheduled_messages(
                context, chat_id, message_ids
            )

            logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ {cancelled_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            return cancelled_count

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
            return 0

    @staticmethod
    def can_reschedule(delivery_date_str, delivery_time_str, min_hours=4):
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–∫–∞–∑ (–Ω–µ –ø–æ–∑–∂–µ —á–µ–º –∑–∞ N —á–∞—Å–æ–≤)

        :param delivery_date_str: –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        :param delivery_time_str: –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
        :param min_hours: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏
        :return: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            delivery_datetime = datetime.strptime(
                f"{delivery_date_str} {delivery_time_str}",
                '%Y-%m-%d %H:%M'
            )

            time_until_delivery = (delivery_datetime - datetime.now()).total_seconds() / 3600

            return time_until_delivery >= min_hours

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞: {e}")
            return False
