import logging
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from database import Database
from config import TELEGRAM_BOT_TOKEN, WORK_START_HOUR, WORK_END_HOUR, DELIVERY_INTERVAL, MIN_HOURS_TO_RESCHEDULE
from utils import validate_kyrgyzstan_phone, format_kyrgyzstan_phone
from reminder_service import ReminderScheduler
from address_validator import test_address_validation, get_address_validator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(CHOOSING_ACTION, REGISTRATION_NAME, REGISTRATION_PHONE, REGISTRATION_ADDRESS,
 ORDER_NAME, ORDER_PHONE, ORDER_ADDRESS, ORDER_BOTTLES, ORDER_DATE, ORDER_TIME,
 RESCHEDULE_SELECT, RESCHEDULE_DATE, RESCHEDULE_TIME, ORDER_ACTION,
 EDIT_NAME, EDIT_PHONE, EDIT_ADDRESS) = range(17)


class WaterBot:
    """Telegram –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤–æ–¥—ã"""

    def __init__(self):
        Database.init_users_file()
        Database.init_orders_file()

    @staticmethod
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        user = Database.get_user(user_id)

        keyboard = [
            ['üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'],
            ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user:
            keyboard.insert(1, ['‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        active_orders = Database.get_active_user_orders(user_id)
        if active_orders:
            keyboard.insert(1, ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã'])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        welcome_text = (
            f"üåä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–æ–¥—ã!\n\n"
            f"{'‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!' if user else '‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.'}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        return CHOOSING_ACTION

    @staticmethod
    async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        text = update.message.text
        user_id = update.effective_user.id

        if text == 'üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑':
            user = Database.get_user(user_id)

            if user:
                # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                context.user_data['order_type'] = 'registered'
                context.user_data['name'] = user['name']
                context.user_data['phone'] = user['phone']
                context.user_data['address'] = user['address']

                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É—Ç—ã–ª–æ–∫
                keyboard = [
                    ['2', '3', '4'],
                    ['5', '6', '7'],
                    ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                await update.message.reply_text(
                    f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                    f"–ò–º—è: {user['name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
                    f"–ê–¥—Ä–µ—Å: {user['address']}\n\n"
                    f"üíß –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥—ã (–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–µ —á–∏—Å–ª–æ):",
                    reply_markup=reply_markup
                )

                return ORDER_BOTTLES
            else:
                # –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                keyboard = [
                    ['üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'],
                    ['üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'],
                    ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                await update.message.reply_text(
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                    reply_markup=reply_markup
                )
                return CHOOSING_ACTION

        elif text == 'üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
            await update.message.reply_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                reply_markup=ReplyKeyboardRemove()
            )
            return REGISTRATION_NAME

        elif text == 'üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
            await update.message.reply_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                reply_markup=ReplyKeyboardRemove()
            )
            return REGISTRATION_NAME

        elif text == 'üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏':
            context.user_data['order_type'] = 'guest'
            await update.message.reply_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                reply_markup=ReplyKeyboardRemove()
            )
            return ORDER_NAME

        elif text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            info_text = (
                f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:\n\n"
                f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {WORK_START_HOUR}:00 - {WORK_END_HOUR}:00\n"
                f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏: {DELIVERY_INTERVAL} –º–∏–Ω—É—Ç\n"
                f"üíß –î–æ—Å—Ç–∞–≤–∫–∞ –ø–∏—Ç—å–µ–≤–æ–π –≤–æ–¥—ã –ø–æ –≤–∞—à–µ–º—É –∞–¥—Ä–µ—Å—É\n\n"
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
                f"‚Ä¢ –í 8:00 —É—Ç—Ä–∞ –≤ –¥–µ–Ω—å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
                f"‚Ä¢ –ó–∞ 30 –º–∏–Ω—É—Ç –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
                f"–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ 'üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'"
            )
            await update.message.reply_text(info_text)
            return CHOOSING_ACTION

        elif text == 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã':
            return await WaterBot.show_my_orders(update, context)

        elif text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
            user = Database.get_user(user_id)
            if user:
                keyboard = [
                    ['‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è'],
                    ['üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'],
                    ['üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å'],
                    ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                await update.message.reply_text(
                    f"üìù –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
                    f"üë§ –ò–º—è: {user['name']}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
                    f"üìç –ê–¥—Ä–µ—Å: {user['address']}\n\n"
                    f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                    reply_markup=reply_markup
                )
                return CHOOSING_ACTION
            else:
                await update.message.reply_text(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
                )
                return CHOOSING_ACTION

        elif text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è':
            await update.message.reply_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
                reply_markup=ReplyKeyboardRemove()
            )
            return EDIT_NAME

        elif text == 'üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω':
            await update.message.reply_text(
                "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "+996 700 123 456 –∏–ª–∏ 0700123456",
                reply_markup=ReplyKeyboardRemove()
            )
            return EDIT_PHONE

        elif text == 'üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å':
            await update.message.reply_text(
                "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
                reply_markup=ReplyKeyboardRemove()
            )
            return EDIT_ADDRESS

        elif text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
            return await WaterBot.start(update, context)

        return CHOOSING_ACTION

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    @staticmethod
    async def registration_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        context.user_data['reg_name'] = update.message.text
        await update.message.reply_text(
            "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +996 700 123 456):"
        )
        return REGISTRATION_PHONE

    @staticmethod
    async def registration_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        phone_number = update.message.text

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not validate_kyrgyzstan_phone(phone_number):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +996 700 123 456."
            )
            return REGISTRATION_PHONE

        context.user_data['reg_phone'] = phone_number
        await update.message.reply_text(
            "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
        )
        return REGISTRATION_ADDRESS

    @staticmethod
    async def registration_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        address = update.message.text
        user_id = update.effective_user.id

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        formatted_phone = format_kyrgyzstan_phone(context.user_data['reg_phone'])

        Database.save_user(
            user_id,
            context.user_data['reg_name'],
            formatted_phone,
            address
        )

        keyboard = [
            ['üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'],
            ['‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'],
            ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.",
            reply_markup=reply_markup
        )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()

        return CHOOSING_ACTION

    # –ó–∞–∫–∞–∑ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    @staticmethod
    async def order_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
        context.user_data['name'] = update.message.text
        await update.message.reply_text(
            "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "+996 700 123 456 –∏–ª–∏ 0700123456"
        )
        return ORDER_PHONE

    @staticmethod
    async def order_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
        phone_number = update.message.text

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not validate_kyrgyzstan_phone(phone_number):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +996 700 123 456."
            )
            return ORDER_PHONE

        context.user_data['phone'] = phone_number
        await update.message.reply_text(
            "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
        )
        return ORDER_ADDRESS

    @staticmethod
    async def order_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É—Ç—ã–ª–æ–∫"""
        context.user_data['address'] = update.message.text

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É—Ç—ã–ª–æ–∫
        keyboard = [
            ['2', '3', '4'],
            ['5', '6', '7'],
            ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "üíß –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥—ã (–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=reply_markup
        )
        return ORDER_BOTTLES

    @staticmethod
    async def order_bottles(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É—Ç—ã–ª–æ–∫"""
        text = update.message.text

        if text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            context.user_data.clear()
            return await WaterBot.start(update, context)

        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        try:
            bottles = int(text.strip())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—É–º–Ω–æ–µ (–±–æ–ª—å—à–µ 0)
            if bottles <= 0:
                await update.message.reply_text(
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
                )
                return ORDER_BOTTLES

            if bottles > 100:
                await update.message.reply_text(
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ –±–æ–ª–µ–µ 100."
                )
                return ORDER_BOTTLES

            context.user_data['bottles'] = bottles

            await update.message.reply_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {bottles} –±—É—Ç—ã–ª{'–∫–∞' if bottles == 1 else '–∫–∏' if bottles < 5 else '–æ–∫'}\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
                reply_markup=ReplyKeyboardRemove()
            )

            return await WaterBot.show_date_selection(update, context)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2, 3, 10)."
            )
            return ORDER_BOTTLES

    @staticmethod
    async def show_date_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –¥–∞—Ç—ã"""
        keyboard = []
        today = datetime.now()

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
        for i in range(7):
            date = today + timedelta(days=i)
            date_str = date.strftime('%Y-%m-%d')

            if i == 0:
                button_text = f"–°–µ–≥–æ–¥–Ω—è ({date.strftime('%d.%m')})"
            elif i == 1:
                button_text = f"–ó–∞–≤—Ç—Ä–∞ ({date.strftime('%d.%m')})"
            else:
                button_text = date.strftime('%d.%m.%Y (%A)')

            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"date_{date_str}")])

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.message.edit_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
                reply_markup=reply_markup
            )

        return ORDER_DATE

    @staticmethod
    async def handle_date_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()

        if query.data == "cancel":
            await query.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
            context.user_data.clear()
            return await WaterBot.start_after_callback(update, context)

        date_str = query.data.replace("date_", "")
        context.user_data['delivery_date'] = date_str

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
        return await WaterBot.show_time_selection(update, context)

    @staticmethod
    async def show_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
        date_str = context.user_data['delivery_date']
        date_obj = datetime.strptime(date_str, '%Y-%m-%d')

        keyboard = []
        current_time = datetime.now()
        min_hours_ahead = 4  # –ú–∏–Ω–∏–º—É–º 4 —á–∞—Å–∞ –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 –º–∏–Ω—É—Ç
        for hour in range(WORK_START_HOUR, WORK_END_HOUR):
            for minute in [0, 30]:
                time_slot = f"{hour:02d}:{minute:02d}"
                slot_datetime = datetime.strptime(f"{date_str} {time_slot}", '%Y-%m-%d %H:%M')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º –∏ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 4 —á–∞—Å–∞
                time_until_slot = (slot_datetime - current_time).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
                if time_until_slot < min_hours_ahead:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ
                if Database.is_time_slot_available(date_str, time_slot):
                    keyboard.append([InlineKeyboardButton(
                        f"‚è∞ {time_slot}",
                        callback_data=f"time_{time_slot}"
                    )])

        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        if not keyboard:
            keyboard.append([InlineKeyboardButton("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤", callback_data="no_slots")])

        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_date")])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        query = update.callback_query
        await query.message.edit_text(
            f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ {date_obj.strftime('%d.%m.%Y')}:\n"
            f"(–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 4 —á–∞—Å–∞)",
            reply_markup=reply_markup
        )

        return ORDER_TIME

    @staticmethod
    async def handle_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        query = update.callback_query
        await query.answer()

        if query.data == "cancel":
            await query.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
            context.user_data.clear()
            return await WaterBot.start_after_callback(update, context)

        if query.data == "back_to_date":
            return await WaterBot.show_date_selection(update, context)

        if query.data == "no_slots":
            await query.answer("‚ö†Ô∏è –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.", show_alert=True)
            return await WaterBot.show_date_selection(update, context)

        if query.data == "occupied":
            await query.answer("‚ö†Ô∏è –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ!", show_alert=True)
            return ORDER_TIME

        time_str = query.data.replace("time_", "")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –µ—â–µ —Ä–∞–∑
        date_str = context.user_data['delivery_date']
        if not Database.is_time_slot_available(date_str, time_str):
            await query.answer("‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ!", show_alert=True)
            return await WaterBot.show_time_selection(update, context)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        formatted_phone = format_kyrgyzstan_phone(context.user_data['phone'])

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        user_id = update.effective_user.id
        delivery_date = datetime.strptime(date_str, '%Y-%m-%d')
        bottles = context.user_data.get('bottles', 1)

        order_id = Database.save_order(
            user_id,
            context.user_data['name'],
            formatted_phone,
            context.user_data['address'],
            delivery_date,
            time_str,
            bottles
        )

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ JobQueue
        reminders = await ReminderScheduler.schedule_reminders(
            context,
            user_id,
            order_id,
            date_str,
            time_str,
            context.user_data['address']
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if reminders:
            morning_msg_id = reminders['morning'].get('message_id')
            pre_delivery_msg_id = reminders['pre_delivery'].get('message_id')
            Database.update_order_reminder_ids(order_id, morning_msg_id, pre_delivery_msg_id)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: morning={morning_msg_id}, pre_delivery={pre_delivery_msg_id}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        confirmation_text = (
            f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n"
            f"üë§ –ò–º—è: {context.user_data['name']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {formatted_phone}\n"
            f"üìç –ê–¥—Ä–µ—Å: {context.user_data['address']}\n"
            f"üíß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {bottles} –±—É—Ç—ã–ª{'–∫–∞' if bottles == 1 else '–∫–∏' if bottles < 5 else '–æ–∫'}\n"
            f"üìÖ –î–∞—Ç–∞: {delivery_date.strftime('%d.%m.%Y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time_str}\n\n"
            f"üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
            f"‚Ä¢ –í 8:00 —É—Ç—Ä–∞ –≤ –¥–µ–Ω—å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            f"‚Ä¢ –ó–∞ 30 –º–∏–Ω—É—Ç –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
        )

        await query.message.edit_text(confirmation_text)

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            ['üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'],
            ['‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'],
            ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
            ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=reply_markup
        )

        return CHOOSING_ACTION

    @staticmethod
    async def start_after_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ callback"""
        user_id = update.effective_user.id
        user = Database.get_user(user_id)

        keyboard = [
            ['üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'],
            ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user:
            keyboard.insert(1, ['‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        active_orders = Database.get_active_user_orders(user_id)
        if active_orders:
            keyboard.insert(1, ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã'])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=reply_markup
        )

        return CHOOSING_ACTION

    @staticmethod
    async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        context.user_data.clear()

        user_id = update.effective_user.id
        user = Database.get_user(user_id)

        keyboard = [
            ['üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'],
            ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user:
            keyboard.insert(1, ['‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=reply_markup
        )

        return CHOOSING_ACTION

    @staticmethod
    async def show_my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        orders = Database.get_active_user_orders(user_id)

        if not orders:
            keyboard = [
                ['üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'],
                ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n\n–û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!",
                reply_markup=reply_markup
            )
            return CHOOSING_ACTION

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        message = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
        keyboard = []

        for order in orders:
            delivery_dt = datetime.strptime(
                f"{order['delivery_date']} {order['delivery_time']}",
                '%Y-%m-%d %H:%M'
            )
            bottles = order.get('bottles', 1)

            message += (
                f"üì¶ {order['order_id']}\n"
                f"üìÖ {delivery_dt.strftime('%d.%m.%Y')} –≤ {order['delivery_time']}\n"
                f"üíß {bottles} –±—É—Ç—ã–ª{'–∫–∞' if bottles == 1 else '–∫–∏' if bottles < 5 else '–æ–∫'}\n"
                f"üìç {order['address']}\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞
            keyboard.append([InlineKeyboardButton(
                f"üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º {order['order_id']}",
                callback_data=f"select_order_{order['order_id']}"
            )])

        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(message, reply_markup=reply_markup)

        return ORDER_ACTION

    @staticmethod
    async def handle_order_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π"""
        query = update.callback_query
        await query.answer()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–∫–∞–∑"
        if query.data.startswith("reschedule_"):
            order_id = query.data.replace("reschedule_", "")
            context.user_data['reschedule_order_id'] = order_id

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –¥–∞—Ç—ã
            await query.message.edit_text(f"‚è∞ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–∫–∞–∑–∞ {order_id}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:")
            return await WaterBot.show_reschedule_date_selection(update, context)

        if query.data == "back_to_menu":
            user_id = update.effective_user.id
            user = Database.get_user(user_id)

            keyboard = [
                ['üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'],
                ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
            ]

            if user:
                keyboard.insert(1, ['‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            active_orders = Database.get_active_user_orders(user_id)
            if active_orders:
                keyboard.insert(1, ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã'])

            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            return CHOOSING_ACTION

        if query.data.startswith("select_order_"):
            order_id = query.data.replace("select_order_", "")
            order = Database.get_order_by_id(order_id)

            if not order:
                await query.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return await WaterBot.start_after_callback(update, context)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            delivery_dt = datetime.strptime(
                f"{order['delivery_date']} {order['delivery_time']}",
                '%Y-%m-%d %H:%M'
            )
            bottles = order.get('bottles', 1)

            order_info = (
                f"üì¶ –ó–∞–∫–∞–∑ {order['order_id']}\n\n"
                f"üë§ –ò–º—è: {order['name']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
                f"üìç –ê–¥—Ä–µ—Å: {order['address']}\n"
                f"üíß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {bottles} –±—É—Ç—ã–ª{'–∫–∞' if bottles == 1 else '–∫–∏' if bottles < 5 else '–æ–∫'}\n"
                f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_dt.strftime('%d.%m.%Y')}\n"
                f"‚è∞ –í—Ä–µ–º—è: {order['delivery_time']}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {order.get('status', '–ù–æ–≤—ã–π')}\n\n"
                f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –∑–∞–∫–∞–∑–æ–º?"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–∫–∞–∑
            can_reschedule = ReminderScheduler.can_reschedule(
                order['delivery_date'],
                order['delivery_time'],
                MIN_HOURS_TO_RESCHEDULE
            )

            keyboard = []

            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
            keyboard.append([InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                callback_data=f"cancel_order_{order_id}"
            )])

            # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            if can_reschedule:
                keyboard.append([InlineKeyboardButton(
                    "‚è∞ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–∫–∞–∑",
                    callback_data=f"reschedule_{order_id}"
                )])

            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")])
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(order_info, reply_markup=reply_markup)

            return ORDER_ACTION

        if query.data == "back_to_orders":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
            user_id = update.effective_user.id
            orders = Database.get_active_user_orders(user_id)

            if not orders:
                await query.message.edit_text("üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
                return await WaterBot.start_after_callback(update, context)

            message = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
            keyboard = []

            for order in orders:
                delivery_dt = datetime.strptime(
                    f"{order['delivery_date']} {order['delivery_time']}",
                    '%Y-%m-%d %H:%M'
                )
                bottles = order.get('bottles', 1)

                message += (
                    f"üì¶ {order['order_id']}\n"
                    f"üìÖ {delivery_dt.strftime('%d.%m.%Y')} –≤ {order['delivery_time']}\n"
                    f"üíß {bottles} –±—É—Ç—ã–ª{'–∫–∞' if bottles == 1 else '–∫–∏' if bottles < 5 else '–æ–∫'}\n"
                    f"üìç {order['address']}\n\n"
                )

                keyboard.append([InlineKeyboardButton(
                    f"üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º {order['order_id']}",
                    callback_data=f"select_order_{order['order_id']}"
                )])

            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(message, reply_markup=reply_markup)

            return ORDER_ACTION

        if query.data.startswith("cancel_order_"):
            order_id = query.data.replace("cancel_order_", "")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–º–∏–Ω–∏–º—É–º 4 —á–∞—Å–∞ –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏)
            order = Database.get_order_by_id(order_id)
            if order:
                delivery_dt = datetime.strptime(
                    f"{order['delivery_date']} {order['delivery_time']}",
                    '%Y-%m-%d %H:%M'
                )
                time_until_delivery = (delivery_dt - datetime.now()).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö

                if time_until_delivery < 4:
                    await query.message.edit_text(
                        f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑!\n\n"
                        f"–î–æ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 4 —á–∞—Å–æ–≤.\n"
                        f"–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞ 4 —á–∞—Å–∞ –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑."
                    )

                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
                    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"select_order_{order_id}")]]
                    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await query.message.edit_text(
                        await query.message.text + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=reply_markup
                    )
                    return ORDER_ACTION

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel_{order_id}")],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"select_order_{order_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.message.edit_text(
                f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ {order_id}?\n\n"
                f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
                reply_markup=reply_markup
            )

            return ORDER_ACTION

        if query.data.startswith("confirm_cancel_"):
            order_id = query.data.replace("confirm_cancel_", "")

            # –û—Ç–º–µ–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
            cancelled_reminders = await ReminderScheduler.cancel_reminders_for_order(context, order_id)
            logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ {cancelled_reminders} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
            success = Database.cancel_order(order_id)

            if success:
                await query.message.edit_text(
                    f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω!\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
                )
            else:
                await query.message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ {order_id}.\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                )

            context.user_data.clear()
            return await WaterBot.start_after_callback(update, context)

        return ORDER_ACTION

    @staticmethod
    async def handle_reschedule_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–∫–∞–∑–∞"""
        query = update.callback_query
        await query.answer()

        if query.data.startswith("reschedule_"):
            order_id = query.data.replace("reschedule_", "")
            context.user_data['reschedule_order_id'] = order_id

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –¥–∞—Ç—ã
            await query.message.edit_text(f"‚è∞ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–∫–∞–∑–∞ {order_id}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:")
            return await WaterBot.show_reschedule_date_selection(update, context)

        return ORDER_ACTION

    @staticmethod
    async def show_reschedule_date_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–∫–∞–∑–∞"""
        keyboard = []
        today = datetime.now()

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
        for i in range(7):
            date = today + timedelta(days=i)
            date_str = date.strftime('%Y-%m-%d')

            if i == 0:
                button_text = f"–°–µ–≥–æ–¥–Ω—è ({date.strftime('%d.%m')})"
            elif i == 1:
                button_text = f"–ó–∞–≤—Ç—Ä–∞ ({date.strftime('%d.%m')})"
            else:
                button_text = date.strftime('%d.%m.%Y (%A)')

            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"reschedule_date_{date_str}")])

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.message.edit_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
                reply_markup=reply_markup
            )

        return RESCHEDULE_DATE

    @staticmethod
    async def handle_reschedule_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–∫–∞–∑–∞"""
        query = update.callback_query
        await query.answer()

        if query.data == "cancel":
            await query.message.edit_text("‚ùå –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
            context.user_data.clear()
            return await WaterBot.start_after_callback(update, context)

        date_str = query.data.replace("reschedule_date_", "")
        context.user_data['new_delivery_date'] = date_str

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–π –¥–∞—Ç—ã
        return await WaterBot.show_reschedule_time_selection(update, context)

    @staticmethod
    async def show_reschedule_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–∫–∞–∑–∞"""
        date_str = context.user_data['new_delivery_date']
        date_obj = datetime.strptime(date_str, '%Y-%m-%d')

        keyboard = []
        current_time = datetime.now()
        min_hours_ahead = 4  # –ú–∏–Ω–∏–º—É–º 4 —á–∞—Å–∞ –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 –º–∏–Ω—É—Ç
        for hour in range(WORK_START_HOUR, WORK_END_HOUR):
            for minute in [0, 30]:
                time_slot = f"{hour:02d}:{minute:02d}"
                slot_datetime = datetime.strptime(f"{date_str} {time_slot}", '%Y-%m-%d %H:%M')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º –∏ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 4 —á–∞—Å–∞
                time_until_slot = (slot_datetime - current_time).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
                if time_until_slot < min_hours_ahead:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ
                if Database.is_time_slot_available(date_str, time_slot):
                    keyboard.append([InlineKeyboardButton(
                        f"‚è∞ {time_slot}",
                        callback_data=f"reschedule_time_{time_slot}"
                    )])

        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        if not keyboard:
            keyboard.append([InlineKeyboardButton("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤", callback_data="no_slots")])

        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reschedule_date")])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        query = update.callback_query
        await query.message.edit_text(
            f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ {date_obj.strftime('%d.%m.%Y')}:\n"
            f"(–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 4 —á–∞—Å–∞)",
            reply_markup=reply_markup
        )

        return RESCHEDULE_TIME

    @staticmethod
    async def handle_reschedule_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–∫–∞–∑–∞"""
        query = update.callback_query
        await query.answer()

        if query.data == "cancel":
            await query.message.edit_text("‚ùå –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
            context.user_data.clear()
            return await WaterBot.start_after_callback(update, context)

        if query.data == "back_to_reschedule_date":
            return await WaterBot.show_reschedule_date_selection(update, context)

        if query.data == "no_slots":
            await query.answer("‚ö†Ô∏è –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.", show_alert=True)
            return await WaterBot.show_reschedule_date_selection(update, context)

        if query.data == "occupied":
            await query.answer("‚ö†Ô∏è –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ!", show_alert=True)
            return RESCHEDULE_TIME

        time_str = query.data.replace("reschedule_time_", "")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –µ—â–µ —Ä–∞–∑
        date_str = context.user_data['new_delivery_date']
        if not Database.is_time_slot_available(date_str, time_str):
            await query.answer("‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ!", show_alert=True)
            return await WaterBot.show_reschedule_time_selection(update, context)

        order_id = context.user_data.get('reschedule_order_id')

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        order = Database.get_order_by_id(order_id)
        user_id = update.effective_user.id

        # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        cancelled_reminders = await ReminderScheduler.cancel_reminders_for_order(context, order_id)
        logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ {cancelled_reminders} —Å—Ç–∞—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –Ω–æ–≤–æ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        success = Database.update_order_schedule(order_id, date_str, time_str)

        if success:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            reminders = await ReminderScheduler.schedule_reminders(
                context,
                user_id,
                order_id,
                date_str,
                time_str,
                order['address']
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ ID –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if reminders:
                morning_msg_id = reminders['morning'].get('message_id')
                pre_delivery_msg_id = reminders['pre_delivery'].get('message_id')
                Database.update_order_reminder_ids(order_id, morning_msg_id, pre_delivery_msg_id)
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–æ–≤—ã–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ {order_id}")

            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ {order_id}")

            await query.message.edit_text(
                f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω!\n\n"
                f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞: {date_str}\n"
                f"‚è∞ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {time_str}\n\n"
                f"üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
                f"‚Ä¢ –í 8:00 —É—Ç—Ä–∞ –≤ –¥–µ–Ω—å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
                f"‚Ä¢ –ó–∞ 30 –º–∏–Ω—É—Ç –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏"
            )
        else:
            await query.message.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )

        context.user_data.clear()
        return await WaterBot.start_after_callback(update, context)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @staticmethod
    async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        new_name = update.message.text

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        Database.update_user_name(user_id, new_name)

        await update.message.reply_text(
            "‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=ReplyKeyboardRemove()
        )

        return await WaterBot.show_edit_menu(update, context)

    @staticmethod
    async def edit_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        new_phone = update.message.text

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not validate_kyrgyzstan_phone(new_phone):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +996 700 123 456."
            )
            return EDIT_PHONE

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        Database.update_user_phone(user_id, new_phone)

        await update.message.reply_text(
            "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=ReplyKeyboardRemove()
        )

        return await WaterBot.show_edit_menu(update, context)

    @staticmethod
    async def edit_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        new_address = update.message.text

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        Database.update_user_address(user_id, new_address)

        await update.message.reply_text(
            "‚úÖ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=ReplyKeyboardRemove()
        )

        return await WaterBot.show_edit_menu(update, context)

    @staticmethod
    async def show_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        user_id = update.effective_user.id
        user = Database.get_user(user_id)

        keyboard = [
            ['‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è'],
            ['üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'],
            ['üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å'],
            ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=reply_markup
        )

        return CHOOSING_ACTION

    @staticmethod
    async def handle_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        text = update.message.text

        if text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è':
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:"
            )
            return EDIT_NAME

        elif text == 'üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω':
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "+996 700 123 456 –∏–ª–∏ 0700123456"
            )
            return EDIT_PHONE

        elif text == 'üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å':
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
            )
            return EDIT_ADDRESS

        elif text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
            return await WaterBot.start(update, context)

        return CHOOSING_ACTION

    # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
    @staticmethod
    async def test_address_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /address –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –∞–¥—Ä–µ—Å –≤ –∫–æ–º–∞–Ω–¥–µ
        if context.args and len(context.args) > 0:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω –∞–¥—Ä–µ—Å
            address = " ".join(context.args)

            await update.message.reply_text(
                "üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–¥—Ä–µ—Å...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            result = await test_address_validation(address)

            await update.message.reply_text(result)
        else:
            # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            help_text = (
                "üìç **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤**\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "`/address <–∞–¥—Ä–µ—Å>`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/address –ë–∏—à–∫–µ–∫, –õ–µ–Ω–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –ò—Å–∞–Ω–æ–≤–∞ 42`\n"
                "‚Ä¢ `/address –ë–∏—à–∫–µ–∫, –º–∫—Ä –ê—Å–∞–Ω–±–∞–π, 12/3`\n"
                "‚Ä¢ `/address –û—à, —É–ª. –õ–µ–Ω–∏–Ω–∞ 25`\n\n"
                "–ú–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∏—Ç:\n"
                "‚úÖ –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ\n"
                "‚úÖ –û–ø—Ä–µ–¥–µ–ª–∏—Ç –≥–æ—Ä–æ–¥\n"
                "‚úÖ –û–ø—Ä–µ–¥–µ–ª–∏—Ç —Ä–∞–π–æ–Ω (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)\n"
                "‚úÖ –ü–æ–ª—É—á–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω Google API)\n\n"
                "üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Maps API –¥–æ–±–∞–≤—å—Ç–µ –≤ .env:\n"
                "`GOOGLE_MAPS_API_KEY=–≤–∞—à_–∫–ª—é—á`"
            )

            await update.message.reply_text(
                help_text,
                parse_mode='Markdown'
            )
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = WaterBot()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (–≤–Ω–µ ConversationHandler –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
    application.add_handler(CommandHandler('start', WaterBot.start))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤
    application.add_handler(CommandHandler('address', WaterBot.test_address_command))

    # –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, WaterBot.handle_main_menu)],
        states={
            CHOOSING_ACTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, WaterBot.handle_main_menu),
            ],
            REGISTRATION_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, WaterBot.registration_name)
            ],
            REGISTRATION_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, WaterBot.registration_phone)
            ],
            REGISTRATION_ADDRESS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, WaterBot.registration_address)
            ],
            ORDER_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, WaterBot.order_name)
            ],
            ORDER_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, WaterBot.order_phone)
            ],
            ORDER_ADDRESS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, WaterBot.order_address)
            ],
            ORDER_BOTTLES: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, WaterBot.order_bottles)
            ],
            ORDER_DATE: [
                CallbackQueryHandler(WaterBot.handle_date_selection)
            ],
            ORDER_TIME: [
                CallbackQueryHandler(WaterBot.handle_time_selection)
            ],
            ORDER_ACTION: [
                CallbackQueryHandler(WaterBot.handle_order_selection),
                CallbackQueryHandler(WaterBot.handle_reschedule_callback)
            ],
            RESCHEDULE_DATE: [
                CallbackQueryHandler(WaterBot.handle_reschedule_date)
            ],
            RESCHEDULE_TIME: [
                CallbackQueryHandler(WaterBot.handle_reschedule_time)
            ],
            EDIT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, WaterBot.edit_name)
            ],
            EDIT_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, WaterBot.edit_phone)
            ],
            EDIT_ADDRESS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, WaterBot.edit_address)
            ],
        },
        fallbacks=[CommandHandler('cancel', WaterBot.cancel)],
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
